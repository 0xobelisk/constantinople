  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module constantinople::errors {

  #[error]

  const CannotMove: vector<u8> = b"This entity cannot move";

  public fun cannot_move_error(condition: bool) {
    assert!(condition, CannotMove)
  }

  #[error]

  const AlreadyRegistered: vector<u8> = b"This address is already registered";

  public fun already_registered_error(condition: bool) {
    assert!(condition, AlreadyRegistered)
  }

  #[error]

  const NotRegistered: vector<u8> = b"This address is not registered";

  public fun not_registered_error(condition: bool) {
    assert!(condition, NotRegistered)
  }

  #[error]

  const SpaceObstructed: vector<u8> = b"This space is obstructed";

  public fun space_obstructed_error(condition: bool) {
    assert!(condition, SpaceObstructed)
  }

  #[error]

  const AlreadyInEncounter: vector<u8> = b"This player already in an encounter";

  public fun already_in_encounter_error(condition: bool) {
    assert!(condition, AlreadyInEncounter)
  }

  #[error]

  const NotInEncounter: vector<u8> = b"This player is not in an encounter";

  public fun not_in_encounter_error(condition: bool) {
    assert!(condition, NotInEncounter)
  }

  #[error]

  const InvalidDirection: vector<u8> = b"Invalid direction";

  public fun invalid_direction_error(condition: bool) {
    assert!(condition, InvalidDirection)
  }

  #[error]

  const InvalidChoice: vector<u8> = b"Invalid choice";

  public fun invalid_choice_error(condition: bool) {
    assert!(condition, InvalidChoice)
  }

  #[error]

  const BalanceTooLow: vector<u8> = b"Balance too low";

  public fun balance_too_low_error(condition: bool) {
    assert!(condition, BalanceTooLow)
  }
}
