  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module constantinople::events {

  use std::ascii::{String, string};

  use constantinople::monster_type::MonsterType;

  use constantinople::monster_catch_result::MonsterCatchResult;

  use constantinople::choice::Choice;

  use constantinople::game_result::GameResult;

  use constantinople::map_config::MapConfig;

  use constantinople::position::Position;

  use constantinople::encounter_info::EncounterInfo;

  use constantinople::player_registered_event::PlayerRegisteredEvent;

  use constantinople::player_registered_event;

  public fun player_registered_event(player: address, position: Position) {
    dubhe::storage_event::emit_set_record<PlayerRegisteredEvent, PlayerRegisteredEvent, PlayerRegisteredEvent>(
				string(b"player_registered_event"),
				option::none(),
			  	option::none(),
			  option::some(player_registered_event::new(player,position))
			  )
  }

  use constantinople::monster_catch_attempt_event::MonsterCatchAttemptEvent;

  use constantinople::monster_catch_attempt_event;

  public fun monster_catch_attempt_event(player: address, monster: address, result: MonsterCatchResult) {
    dubhe::storage_event::emit_set_record<MonsterCatchAttemptEvent, MonsterCatchAttemptEvent, MonsterCatchAttemptEvent>(
				string(b"monster_catch_attempt_event"),
				option::none(),
			  	option::none(),
			  option::some(monster_catch_attempt_event::new(player,monster,result))
			  )
  }

  use constantinople::choice_made_event::ChoiceMadeEvent;

  use constantinople::choice_made_event;

  public fun choice_made_event(player: address, player_choice: Choice, contract_choice: Choice, result: GameResult) {
    dubhe::storage_event::emit_set_record<ChoiceMadeEvent, ChoiceMadeEvent, ChoiceMadeEvent>(
				string(b"choice_made_event"),
				option::none(),
			  	option::none(),
			  option::some(choice_made_event::new(player,player_choice,contract_choice,result))
			  )
  }
}
